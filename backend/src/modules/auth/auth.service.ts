import { Injectable, ConflictException, UnauthorizedException } from '@nestjs/common';
import { CreateUserDto } from '../users/dto/create-user.dto';
import { RegisterDto } from './dto/register.dto';
import { LoginDto } from './dto/login.dto';
import { UsersService } from '../users/users.service';
import * as bcrypt from 'bcrypt';
import { JwtService } from '@nestjs/jwt';

@Injectable()
export class AuthService {
  constructor(
    private usersService: UsersService,
    private jwtService: JwtService,
  ) {}

  async register(registerDto: RegisterDto) {
    // Verificar si el usuario ya existe
    const existingUser = await this.usersService.findByEmail(registerDto.email);
    if (existingUser) {
      throw new ConflictException('El email ya est√° registrado');
    }

    // Procesar el nombre completo
    const nameParts = registerDto.name.trim().split(' ');
    const firstName = nameParts[0];
    const lastName = nameParts.slice(1).join(' ') || firstName;

    // Hash de la contrase√±a con verificaci√≥n
    console.log('üîê REGISTER - Password to hash:', registerDto.password);
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(registerDto.password, saltRounds);
    console.log('üîê REGISTER - Generated hash:', hashedPassword.substring(0, 10) + '...');
    
    // VERIFICACI√ìN CR√çTICA: Asegurar que el hash funciona antes de guardar
    const verifyNewHash = await bcrypt.compare(registerDto.password, hashedPassword);
    console.log('üîê REGISTER - Hash verification:', verifyNewHash);
    
    if (!verifyNewHash) {
      console.error('‚ùå REGISTER - Hash verification failed!');
      throw new Error('Error interno al procesar la contrase√±a');
    }

    // Crear el usuario
    const userData: CreateUserDto = {
      firstName,
      lastName,
      email: registerDto.email,
      password: hashedPassword,
      phone: registerDto.phone,
      address: registerDto.address,
    };

    const user = await this.usersService.create(userData);
    
    // Generar token JWT
    const payload = { email: user.email, sub: user.id, role: user.role };
    const access_token = this.jwtService.sign(payload);

    // Remover la contrase√±a de la respuesta
    const { password, ...userWithoutPassword } = user;

    return {
      user: userWithoutPassword,
      access_token,
      message: 'Usuario registrado exitosamente',
    };
  }

  async login(loginDto: LoginDto) {
    console.log('üîç LOGIN - Email:', loginDto.email);
    console.log('üîç LOGIN - Password length:', loginDto.password?.length);
    
    // Buscar usuario por email (con contrase√±a para validaci√≥n)
    const user = await this.usersService.findByEmailWithPassword(loginDto.email);
    if (!user) {
      console.log('‚ùå LOGIN - Usuario no encontrado');
      throw new UnauthorizedException('Credenciales inv√°lidas');
    }

    console.log('‚úÖ LOGIN - Usuario encontrado:', user.email);
    console.log('üîê LOGIN - Hash en DB:', user.password?.substring(0, 10) + '...');

    // Verificar contrase√±a
    const isPasswordValid = await bcrypt.compare(loginDto.password, user.password);
    console.log('üîê LOGIN - Contrase√±a v√°lida:', isPasswordValid);
    
    if (!isPasswordValid) {
      console.log('‚ùå LOGIN - Contrase√±a incorrecta');
      throw new UnauthorizedException('Credenciales inv√°lidas');
    }

    console.log('‚úÖ LOGIN - Exitoso para:', user.email);

    // Generar token JWT
    const payload = { email: user.email, sub: user.id, role: user.role };
    const access_token = this.jwtService.sign(payload);

    // Remover la contrase√±a de la respuesta
    const { password, ...userWithoutPassword } = user;

    return {
      user: userWithoutPassword,
      access_token,
      message: 'Login exitoso',
    };
  }

  async forgotPassword(email: string) {
    const user = await this.usersService.findByEmail(email);
    if (!user) {
      // Por seguridad, no revelamos si el email existe o no
      return {
        message: 'Si el email existe, recibir√°s un enlace de recuperaci√≥n',
      };
    }

    // Aqu√≠ implementar√≠as el env√≠o de email de recuperaci√≥n
    // Por ahora solo retornamos un mensaje
    console.log(`Email de recuperaci√≥n enviado a: ${email}`);

    return {
      message: 'Si el email existe, recibir√°s un enlace de recuperaci√≥n',
    };
  }
}
